{"version":3,"sources":["types/counter.js","Form.js","actions/counter.js","Logs.js","App.js","serviceWorker.js","reducers/index.js","index.js"],"names":["Form","counter","useSelector","state","useState","inputCounter","setInputCounter","dispatch","useDispatch","onSubmit","event","value","preventDefault","console","log","Number","type","types","payload","onChange","target","Logs","logs","onClick","map","App","handleIncrease","props","onIncrease","this","React","Component","mapActionToProps","step","connect","Boolean","window","location","hostname","match","initState","reducer","action","store","createStore","reducers","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qTAKe,EAJK,aAIL,EAHU,kBAGV,EAFK,a,QC+BLA,EA7BF,WACT,IAAMC,EAAUC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,WAD5B,EAEyBG,mBAASH,GAFlC,mBAERI,EAFQ,KAEMC,EAFN,KAITC,EAAWC,cAUjB,OACI,0BAAMC,SATW,SAAAC,GCCO,IAAAC,EDAxBD,EAAME,iBACNC,QAAQC,IAAI,mCACZP,GCFwBI,EDGHI,OAAOV,GCFzB,CACHW,KAAMC,EACNC,QAAS,CACLP,MAAOA,QDKP,6BACI,2BACIQ,SACI,gBAAEC,EAAF,EAAEA,OAAF,OAAcd,EAAgBc,EAAOT,QAEzCA,MAAQN,IAEZ,2BAAOW,KAAK,SAASL,MAAM,cEF5BU,EArBF,WAAO,IAAD,EACSnB,aAAY,SAAAC,GAAK,OAAIA,KAAtCmB,EADQ,EACRA,KAAMrB,EADE,EACFA,QACPM,EAAWC,cAOjB,OACI,6BACI,4BAAQe,QAPI,WAChBV,QAAQC,IAAI,mCACZP,EDWG,CACHS,KAAMC,MCPF,SACYhB,EADZ,KAGA,4BACMqB,EAAKE,KAAI,SAAAb,GAAK,OAAI,4BAAKA,SCVnCc,E,4MACFC,eAAiB,SAAAhB,GACbG,QAAQC,IAAI,YACZ,EAAKa,MAAMC,c,uDAEL,IACE3B,EAAY4B,KAAKF,MAAjB1B,QACR,OACI,iCACMA,EACF,4BAAQsB,QAAUM,KAAKH,gBAAvB,YAGA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAdEI,IAAMC,WA0BlBC,EAAmB,CACrBJ,WFlCiC,WACjC,MAAO,CACHZ,KAAMC,EACNC,QAAS,CACLe,KAAM,MEiCHC,eAVS,SAAC/B,EAAOwB,GAC5B,MAAO,CACH1B,QAASE,EAAMF,WAQiB+B,EAAzBE,CAA2CT,GC5BtCU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,0BCfAC,EAAY,CACdvC,QAAS,EACTqB,KAAM,IA2BKmB,EAxBC,WAAgC,IAA/BtC,EAA8B,uDAAtBqC,EAAWE,EAAW,uCAC3C,OAAOA,EAAO1B,MACV,KAAKC,EAAL,IACYgB,EAASS,EAAOxB,QAAhBe,KACR,OAAO,2BACA9B,GADP,IAEIF,QAASE,EAAMF,QAAUgC,IAEjC,KAAKhB,EACD,OAAO,2BACAd,GADP,IAEIF,QAASyC,EAAOxB,QAAQP,QAEhC,KAAKM,EAAL,IACYhB,EAAkBE,EAAlBF,QAASqB,EAASnB,EAATmB,KACjB,OAAO,2BACAnB,GADP,IAEImB,KAAK,GAAD,mBAAMA,GAAN,CAAYrB,MAExB,QACI,OAAOE,IClBbwC,EAAQC,YACVC,EACAT,OAAOU,8BACJV,OAAOU,gCAIdC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAD,CAAUN,MAAQA,GACd,kBAAC,EAAD,QAGRO,SAASC,eAAe,SF4GtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMC,c","file":"static/js/main.8aa07134.chunk.js","sourcesContent":["// ./src/types/counter.js\r\nconst SET_COUNTER = 'setCounter';\r\nconst INCREASE_COUNTER = 'increaseCounter';\r\nconst LOG_COUNTER = 'logCounter';\r\n\r\nexport default {\r\n    SET_COUNTER,\r\n    INCREASE_COUNTER,\r\n    LOG_COUNTER,\r\n};","// ./src/Form.js\r\nimport React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { setCounterAction } from './actions/counter';\r\n\r\nconst Form = () => {\r\n    const counter = useSelector(state => state.counter);\r\n    const [inputCounter, setInputCounter] = useState(counter);\r\n  \r\n    const dispatch = useDispatch();\r\n                             \r\n    const handleSubmit = event => {\r\n        event.preventDefault();\r\n        console.log('uruchom akcję [setCounter]');\r\n        dispatch(\r\n            setCounterAction(Number(inputCounter))\r\n        );\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <div>\r\n                <input\r\n                    onChange={ \r\n                        ({target}) => setInputCounter(target.value) \r\n                    } \r\n                    value={ inputCounter }\r\n                />\r\n                <input type=\"submit\" value=\"zapisz\" />\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default Form;","// ./src/actions/counter.js\r\nimport types from './../types/counter';\r\n\r\nexport const increaseCounterAction = () => {\r\n    return {\r\n        type: types.INCREASE_COUNTER,\r\n        payload: {\r\n            step: 2,\r\n        },\r\n    }\r\n}\r\n\r\nexport const setCounterAction = value => {\r\n    return {\r\n        type: types.SET_COUNTER,\r\n        payload: {\r\n            value: value,\r\n        },\r\n    }\r\n}\r\n\r\nexport const logCounterAction = () => {\r\n    return {\r\n        type: types.LOG_COUNTER,\r\n    }\r\n}","// ./src/Logs.js\r\nimport React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { logCounterAction } from './actions/counter';\r\n\r\nconst Logs = () => {\r\n    const {logs, counter} = useSelector(state => state);\r\n    const dispatch = useDispatch();\r\n                             \r\n    const handleClick = () => {\r\n        console.log('uruchom akcję [logCounter]');\r\n        dispatch(logCounterAction());\r\n    }\r\n   \r\n    return (\r\n        <div>\r\n            <button onClick={ handleClick }>\r\n                save ({ counter })\r\n            </button>\r\n            <ul>\r\n                { logs.map(value => <li>{value}</li>) }\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Logs;","// ./src/App.js\nimport React from 'react';\nimport './App.css';\n\nimport { connect } from 'react-redux';\nimport { increaseCounterAction } from './actions/counter';\n\nimport Form from './Form';\nimport Logs from './Logs';\n\nclass App extends React.Component {\n    handleIncrease = event => {\n        console.log('increase');\n        this.props.onIncrease();\n    }\n    render() {\n        const { counter } = this.props;\n        return (\n            <section>\n                { counter }\n                <button onClick={ this.handleIncrease }>\n                    increase\n                </button>\n                <Form />\n                <Logs />\n            </section>\n        );\n    }\n}\n\nconst mapStateToProps = (state, props) => {\n    return {\n        counter: state.counter,\n    }\n}\n\nconst mapActionToProps = {\n    onIncrease: increaseCounterAction,\n};\n\nexport default connect(mapStateToProps, mapActionToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// ./src/reducers/index.js\r\nimport types from './../types/counter';\r\n\r\nconst initState = { \r\n    counter: 0,\r\n    logs: [],\r\n};\r\n\r\nconst reducer = (state = initState, action) => {\r\n    switch(action.type) {\r\n        case types.INCREASE_COUNTER:\r\n            const { step } = action.payload;\r\n            return {\r\n                ...state,\r\n                counter: state.counter + step,\r\n            };\r\n        case types.SET_COUNTER:\r\n            return {\r\n                ...state,\r\n                counter: action.payload.value,\r\n            };\r\n        case types.LOG_COUNTER:\r\n            const { counter, logs } = state;\r\n            return {\r\n                ...state,\r\n                logs: [...logs, counter],\r\n            };\r\n        default: \r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport reducers from './reducers';\n\nconst store = createStore(\n    reducers,\n    window.__REDUX_DEVTOOLS_EXTENSION__ \n    && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={ store }>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}